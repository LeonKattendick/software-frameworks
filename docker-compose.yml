version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    profiles:
      - local
      - production
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    hostname: kafka
    container_name: kafka
    profiles:
      - local
      - production
    ports:
      - "29092:29092"
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    profiles:
      - local
      - production
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/kafka-connect-datagen:0.6.0-7.3.0
    hostname: connect
    container_name: connect
    profiles:
      - local
      - production
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
        "
        #
        kafka-topics --bootstrap-server kafka:29092 --list
        
        echo -e 'Creating Kafka Topics'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracker_dota2 --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracker_league_of_legends --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracker_unified --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracker_kda_raw --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tracker_kda --replication-factor 1 --partitions 1
        
        echo -e 'Topics created:'
        kafka-topics --bootstrap-server kafka:29092 --list
        "

  backend:
    image: backend-module:latest
    hostname: backend
    container_name: backend
    profiles:
      - production
    build:
      context: ./
      dockerfile: backend.dockerfile
    restart: always
    ports:
      - "8090:8090"

  crawler:
    image: crawler-module:latest
    hostname: crawler
    container_name: crawler
    profiles:
      - production
    build:
      context: ./
      dockerfile: crawler.dockerfile
    restart: always
    ports:
      - "8091:8091"

  streams:
    image: kafka-module:latest
    hostname: streams
    container_name: streams
    profiles:
      - production
    build:
      context: ./
      dockerfile: streams.dockerfile
    restart: always
